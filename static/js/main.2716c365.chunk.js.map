{"version":3,"sources":["components/Nav/index.js","components/FriendCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","navMessage","score","highScore","FriendCard","onClick","handleClick","alt","name","src","image","Wrapper","children","App","state","Friends","cardClicked","shuffleArray","array","i","length","j","Math","floor","random","temp","newArr","_this","push","setState","Set","size","_this2","this","components_Nav","components_Wrapper","map","friend","components_FriendCard","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"8qDAuBeA,MAnBf,SAAaC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,qBACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5JT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCAAuCO,GAAG,cACzDV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACVJ,EAAMY,YAETX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACUJ,EAAMa,MADhB,kBACsCb,EAAMc,oBCLnCC,MARf,SAAoBf,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMY,QAAS,kBAAMhB,EAAMiB,YAAYjB,EAAMW,KAAKO,IAAKlB,EAAMmB,KAAMC,IAAKpB,EAAMqB,gBCCtFC,MAJf,SAAiBtB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMuB,kBC4E1BC,6MAxEbC,MAAQ,CACNC,UACAZ,UAAW,EACXD,MAAO,EACPc,YAAa,GACbf,WAAY,8EAIdgB,aAAe,SAACC,GAEd,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,KAGTZ,YAAc,SAACN,GAEb,IAAI0B,EAASC,EAAKb,MAAME,YACxBU,EAAOE,KAAK5B,GACZ2B,EAAKE,SAAS,CAAEb,YAAaU,IAIzB,IAAII,IAAIJ,GAAQK,OAASL,EAAON,OAClCO,EAAKE,SAAS,CACZ1B,UAAWwB,EAAKb,MAAMX,UACtBa,YAAa,GACbd,MAAO,EACPD,WAAY,mDAIV0B,EAAKb,MAAMZ,OAASyB,EAAKb,MAAMX,WACjCwB,EAAKE,SAAS,CACZ1B,UAAWwB,EAAKb,MAAMX,UAAY,IAGtCwB,EAAKE,SAASd,QAAUY,EAAKV,aAAaU,EAAKb,MAAMC,SACrDY,EAAKE,SAAS,CACZ3B,MAAOyB,EAAKb,MAAMZ,MAAQ,EAC1BD,WAAY,uFAKT,IAAA+B,EAAAC,KACP,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0C,EAAD,CACEhC,MAAO+B,KAAKnB,MAAMZ,MAClBC,UAAW8B,KAAKnB,MAAMX,UACtBF,WAAYgC,KAAKnB,MAAMb,aAEzBX,EAAAC,EAAAC,cAAC2C,EAAD,KACGF,KAAKnB,MAAMC,QAAQqB,IAAI,SAAAC,GAAM,OAC5B/C,EAAAC,EAAAC,cAAC8C,EAAD,CACE5B,MAAO2B,EAAO3B,MACdJ,YAAa0B,EAAK1B,YAClBN,GAAIqC,EAAOrC,gBAjEPuC,mBCDlBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.2716c365.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg sticky-top navbar-light bg-light\">\n    <h3 className=\"navbar-brand\">Cartoon memory...</h3>\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse text-center\" id=\"navbarText\">\n    <div className=\"navbar-nav ml-auto mr-auto\">\n        {props.navMessage}\n    </div>\n      <div className=\"navbar-text\">\n        Score: {props.score} | High Score: {props.highScore}\n      </div>\n    </div>\n  </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card-custom\">\n        <img className=\"img\" onClick={() => props.handleClick(props.id)} alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Friends from \"./friends.json\";\n\nclass App extends Component {\n// Setting state: Friends, highScore, score, cardClick, navMessage\n  state = {\n    Friends,\n    highScore: 0,\n    score: 0,\n    cardClicked: [],\n    navMessage: \"Click a photo to begin! Clicking the same image twice restarts the game.\"\n  };\n\n// Function to shuffle the photos\n  shuffleArray = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  handleClick = (id) => {\n    // handleClick push id to newArr, setState highScore cardClicked.\n    let newArr = this.state.cardClicked;\n    newArr.push(id);\n    this.setState({ cardClicked: newArr });\n    // console.log(\"cardClicked: \" + newArr);\n    // console.log(\"newArr Length: \" + newArr.length);\n\n    if (new Set(newArr).size !== newArr.length) {\n      this.setState({\n        highScore: this.state.highScore,\n        cardClicked: [],\n        score: 0,\n        navMessage: \"INCORRECT! New round. Click a photo to begin!\"\n      })\n    } \n    else {\n      if (this.state.score >= this.state.highScore) {\n        this.setState({\n          highScore: this.state.highScore + 1,\n        });\n      }\n      this.setState.Friends = this.shuffleArray(this.state.Friends);\n      this.setState({\n        score: this.state.score + 1,\n        navMessage: \"CORRECT!\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          highScore={this.state.highScore}\n          navMessage={this.state.navMessage}\n        />\n        <Wrapper>\n          {this.state.Friends.map(friend => (\n            <FriendCard\n              image={friend.image}\n              handleClick={this.handleClick}\n              id={friend.id}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  };\n};\n\nexport default App;\n\n// Basis of clicky game: click on randomize pictures, try to get the highest score, clicking on the same picture twice restarts the round.\n\n//START \n// Shuffle pictures, setState array: [], setState score: 0, message: Click an image to begin, don't click an image twice or the game\n\n// When a picture is clicked take that id push it into an array.\n// If id === to id of array return message of \"Incorrect\"\n// Else add one point with setState: this.state.score.\n// If score > highScore setState highScore === score\n// ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}